{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/ERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0-rc.1) (token/ERC1155/ERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC1155.sol\";\nimport \"./IERC1155Receiver.sol\";\nimport \"./extensions/IERC1155MetadataURI.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of the basic standard multi-token.\n * See https://eips.ethereum.org/EIPS/eip-1155\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\n *\n * _Available since v3.1._\n */\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\n    using Address for address;\n\n    // Mapping from token ID to account balances\n    mapping(uint256 => mapping(address => uint256)) private _balances;\n\n    // Mapping from account to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\n    string private _uri;\n\n    /**\n     * @dev See {_setURI}.\n     */\n    constructor(string memory uri_) {\n        _setURI(uri_);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC1155).interfaceId ||\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC1155MetadataURI-uri}.\n     *\n     * This implementation returns the same URI for *all* token types. It relies\n     * on the token type ID substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * Clients calling this function must replace the `\\{id\\}` substring with the\n     * actual token type ID.\n     */\n    function uri(uint256) public view virtual override returns (string memory) {\n        return _uri;\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\n        require(account != address(0), \"ERC1155: address zero is not a valid owner\");\n        return _balances[id][account];\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOfBatch}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\n        public\n        view\n        virtual\n        override\n        returns (uint256[] memory)\n    {\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\n        }\n\n        return batchBalances;\n    }\n\n    /**\n     * @dev See {IERC1155-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC1155-isApprovedForAll}.\n     */\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[account][operator];\n    }\n\n    /**\n     * @dev See {IERC1155-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not token owner or approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }\n\n    /**\n     * @dev See {IERC1155-safeBatchTransferFrom}.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not token owner or approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n        _balances[id][to] += amount;\n\n        emit TransferSingle(operator, from, to, id, amount);\n\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; ++i) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n            _balances[id][to] += amount;\n        }\n\n        emit TransferBatch(operator, from, to, ids, amounts);\n\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Sets a new URI for all token types, by relying on the token type ID\n     * substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\n     * clients with the token type ID.\n     *\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n     * interpreted by clients as\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n     * for token type ID 0x4cce0.\n     *\n     * See {uri}.\n     *\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\n     * this function emits no events.\n     */\n    function _setURI(string memory newuri) internal virtual {\n        _uri = newuri;\n    }\n\n    /**\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _mint(\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _balances[id][to] += amount;\n        emit TransferSingle(operator, address(0), to, id, amount);\n\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _mintBatch(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            _balances[ids[i]][to] += amounts[i];\n        }\n\n        emit TransferBatch(operator, address(0), to, ids, amounts);\n\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens of token type `id` from `from`\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `from` must have at least `amount` tokens of token type `id`.\n     */\n    function _burn(\n        address from,\n        uint256 id,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n\n        emit TransferSingle(operator, from, address(0), id, amount);\n\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     */\n    function _burnBatch(\n        address from,\n        uint256[] memory ids,\n        uint256[] memory amounts\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n        }\n\n        emit TransferBatch(operator, from, address(0), ids, amounts);\n\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC1155: setting approval status for self\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `id` and `amount` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    function _doSafeTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non-ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _doSafeBatchTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\n                bytes4 response\n            ) {\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non-ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\n        uint256[] memory array = new uint256[](1);\n        array[0] = element;\n\n        return array;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155.sol\";\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155MetadataURI is IERC1155 {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ERC1155Receiver.sol\";\n\n/**\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\n *\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\n * stuck.\n *\n * @dev _Available since v3.1._\n */\ncontract ERC1155Holder is ERC1155Receiver {\n    function onERC1155Received(\n        address,\n        address,\n        uint256,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(\n        address,\n        address,\n        uint256[] memory,\n        uint256[] memory,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155BatchReceived.selector;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155Receiver.sol\";\nimport \"../../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0-rc.1) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0-rc.1) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/Loyalty0.03/extensions/LoyaltyEscrowRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport \"../LoyaltyProgram.sol\";\nimport \"../modules/LoyaltyERC20Escrow.sol\";\nimport \"../modules/LoyaltyERC721Escrow.sol\";\nimport \"../modules/LoyaltyERC1155Escrow.sol\";\n\nabstract contract LoyaltyEscrowRegistry is LoyaltyProgram {\n    event LoyaltyERC20EscrowModuleSet(\n        LoyaltyERC20Escrow oldERC20Module,\n        LoyaltyERC20Escrow newERC20Module\n    );\n\n    event LoyaltyERC721EscrowModuleSet(\n        LoyaltyERC721Escrow oldERC721Module,\n        LoyaltyERC721Escrow newERC721Module\n    );\n\n    event LoyaltyERC1155EscrowModuleSet(\n        LoyaltyERC1155Escrow oldERC115Module,\n        LoyaltyERC1155Escrow newERC115Module\n    );\n\n    LoyaltyERC20Escrow public loyaltyERC20EscrowModule;\n    LoyaltyERC721Escrow public loyaltyERC721EscrowModule;\n    LoyaltyERC1155Escrow public loyaltyERC1155EscrowModule;\n\n    error OnlyLoyaltyCreatorCanSetEscrowModule();\n\n    function setERC20EscrowModule(\n        LoyaltyERC20Escrow _loyaltyERC20EscrowModule\n    ) public {\n        if (msg.sender != creator)\n            revert OnlyLoyaltyCreatorCanSetEscrowModule();\n\n        LoyaltyERC20Escrow oldERC20Module = loyaltyERC20EscrowModule;\n        loyaltyERC20EscrowModule = _loyaltyERC20EscrowModule;\n\n        emit LoyaltyERC20EscrowModuleSet(\n            oldERC20Module,\n            _loyaltyERC20EscrowModule\n        );\n    }\n\n    function setERC721EscrowModule(\n        LoyaltyERC721Escrow _loyaltyERC721EscrowModule\n    ) public {\n        if (msg.sender != creator)\n            revert OnlyLoyaltyCreatorCanSetEscrowModule();\n        LoyaltyERC721Escrow oldERC721Module = loyaltyERC721EscrowModule;\n        loyaltyERC721EscrowModule = _loyaltyERC721EscrowModule;\n\n        emit LoyaltyERC721EscrowModuleSet(\n            oldERC721Module,\n            _loyaltyERC721EscrowModule\n        );\n    }\n\n    function setERC1155EscrowModule(\n        LoyaltyERC1155Escrow _loyaltyERC1155EscrowModule\n    ) public {\n        if (msg.sender != creator)\n            revert OnlyLoyaltyCreatorCanSetEscrowModule();\n\n        LoyaltyERC1155Escrow oldERC1155Module = loyaltyERC1155EscrowModule;\n        loyaltyERC1155EscrowModule = _loyaltyERC1155EscrowModule;\n\n        emit LoyaltyERC1155EscrowModuleSet(\n            oldERC1155Module,\n            _loyaltyERC1155EscrowModule\n        );\n    }\n}\n"
    },
    "contracts/Loyalty0.03/interfaces/ILoyaltyERC1155Escrow.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\ninterface ILoyaltyERC1155Escrow {\n    function handleRewardsUnlock(\n        address _user,\n        uint256 _objIndex,\n        uint256 _tierIndex,\n        uint256[] memory _passedTiers\n    ) external;\n}\n"
    },
    "contracts/Loyalty0.03/interfaces/ILoyaltyERC20Escrow.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\ninterface ILoyaltyERC20Escrow {\n    function handleRewardsUnlock(\n        address _user,\n        uint256 _objIndex,\n        uint256 _tierIndex,\n        uint256[] memory _passedTiers\n    ) external;\n}\n"
    },
    "contracts/Loyalty0.03/interfaces/ILoyaltyERC721Escrow.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\ninterface ILoyaltyERC721Escrow {\n    function handleRewardsUnlock(\n        address _user,\n        uint256 _rewardGoal,\n        uint256 _rewardGoalTier\n    ) external;\n}\n"
    },
    "contracts/Loyalty0.03/Loyalty.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport \"./LoyaltyProgram.sol\";\nimport \"./extensions/LoyaltyEscrowRegistry.sol\";\nimport \"./utils/LoyaltySorting.sol\";\n\ncontract Loyalty is LoyaltyEscrowRegistry {\n    constructor(\n        string memory _name,\n        bytes32[] memory _targetObjectives,\n        bytes32[] memory _authorities,\n        uint256[] memory _rewards,\n        RewardType _rewardType,\n        uint256 _programEndsAt,\n        bool _tiersSortingActive,\n        bytes32[] memory _tierNames,\n        uint256[] memory _tierRewardsRequired\n    )\n        LoyaltyProgram(\n            _name,\n            _targetObjectives,\n            _authorities,\n            _rewards,\n            _rewardType,\n            _programEndsAt,\n            _tiersSortingActive,\n            _tierNames,\n            _tierRewardsRequired\n        )\n        LoyaltySorting(_tiersSortingActive)\n    {}\n}\n"
    },
    "contracts/Loyalty0.03/LoyaltyProgram.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport \"./utils/LoyaltySorting.sol\";\nimport \"./interfaces/ILoyaltyERC1155Escrow.sol\";\nimport \"./interfaces/ILoyaltyERC721Escrow.sol\";\nimport \"./interfaces/ILoyaltyERC20Escrow.sol\";\n\nabstract contract LoyaltyProgram is LoyaltySorting {\n    enum RewardType {\n        Points,\n        ERC20,\n        ERC721,\n        ERC1155\n    }\n\n    enum LoyaltyState {\n        Idle,\n        AwaitingEscrowSetup,\n        Active,\n        Completed,\n        Canceled\n    }\n\n    enum ObjectiveAuthority {\n        NotSet,\n        User,\n        Owner\n    }\n\n    struct Objective {\n        bytes32 name;\n        uint256 reward;\n        bytes32 authority;\n    }\n\n    struct Tier {\n        bytes32 name;\n        uint256 rewardsRequired;\n    }\n\n    struct User {\n        uint256 objectivesCompletedCount;\n        mapping(uint256 => bool) completedObjectives;\n        uint256 rewardsEarned;\n        uint256 currentTier;\n    }\n\n    event LoyaltyProgramCreated(\n        string name,\n        address creator,\n        RewardType rewardType\n    );\n    event LoyaltyProgramActive(address indexed sender, uint256 updatedAt);\n    event ObjectiveCompleted(\n        address indexed user,\n        uint256 objectiveIndex,\n        uint256 completedAt,\n        uint256 totalPoints\n    );\n    event PointsUpdate(\n        address indexed user,\n        uint256 totalPoints,\n        uint256 amount,\n        uint256 updatedAt\n    );\n\n    string public constant VERSION = \"0.03\";\n    address public constant TEAM_ADDRESS =\n        0xe63DC839fA2a6A418Af4B417cD45e257dD76f516;\n\n    bytes32 constant USER_AUTHORITY = \"USER\";\n    bytes32 constant CREATOR_AUTHORITY = \"CREATOR\";\n    uint256 public constant MAX_OBJECTIVES_LENGTH = 10;\n    uint256 public constant MAX_TIERS_LENGTH = 8;\n\n    string public name;\n    address public creator;\n    bool public isActive;\n    bool public tiersAreActive;\n    uint256 public tierCount;\n    uint256 public totalPointsPossible;\n    uint256 public programEndsAt;\n    RewardType public rewardType;\n    bool public canceled;\n\n    Objective[] objectives;\n    mapping(uint256 => Tier) tiers;\n    mapping(address => User) users;\n\n    uint256 public greatestPointsGiven;\n    mapping(address => uint256) userToPointsGiven;\n\n    ILoyaltyERC1155Escrow erc1155EscrowContract;\n    ILoyaltyERC721Escrow erc721EscrowContract;\n    ILoyaltyERC20Escrow erc20EscrowContract;\n\n    address public constant amoyRelay =\n        0x7219173e0a99580b7A0733c788D56E6e4A8e1C16;\n    address public constant sepoliaRelay =\n        0x55042894942F391726f35A0FE3b5c2829320fdd3;\n    address public constant testRelayDelete =\n        0x9965507D1a55bcC2695C58ba16FB37d819B0A4dc;\n\n    mapping(address => bool) isRelayer;\n\n    error EmptyProgramName();\n    error EmptyObjectives();\n    error ConstructorArrMismatch();\n    error MaxObjExceeded();\n    error MaxTierExceeded();\n    error ProgramDurationTooShort();\n\n    error ProgramMustBeActive();\n    error ObjectiveAlreadyCompleted(uint256 objectiveIndex, address user);\n\n    error InvalidObjective();\n\n    error OnlyCreatorCanCall();\n    error TierRewardsMustBeInAscendingOrder();\n    error TierNameAndRewardMismatch();\n\n    error UserCanNotBeZeroAddress();\n    error OnlyUserOrRelay();\n    error OnlyCreatorOrRelay();\n    error VerificationFailed();\n\n    constructor(\n        string memory _name,\n        bytes32[] memory _targetObjectives,\n        bytes32[] memory _authorities,\n        uint256[] memory _rewards,\n        RewardType _rewardType,\n        uint256 _programEndsAt,\n        bool _tiersSortingActive,\n        bytes32[] memory _tierNames,\n        uint256[] memory _tierRewardsRequired\n    ) {\n        if (bytes(_name).length == 0) revert EmptyProgramName();\n        if (_targetObjectives.length == 0) revert EmptyObjectives();\n        if (\n            _targetObjectives.length != _rewards.length ||\n            _rewards.length != _authorities.length\n        ) {\n            revert ConstructorArrMismatch();\n        }\n        if (_targetObjectives.length > MAX_OBJECTIVES_LENGTH)\n            revert MaxObjExceeded();\n\n        uint256 minimumProgramDuration = 1 days;\n        if (_programEndsAt < block.timestamp + minimumProgramDuration) {\n            revert ProgramDurationTooShort();\n        }\n\n        name = _name;\n        creator = msg.sender;\n        isActive = false;\n        tiersAreActive = false;\n        rewardType = _rewardType;\n        programEndsAt = _programEndsAt;\n        rewardType = _rewardType;\n\n        isRelayer[amoyRelay] = true;\n        isRelayer[sepoliaRelay] = true;\n        isRelayer[testRelayDelete] = true;\n\n        for (uint256 i = 0; i < _targetObjectives.length; i++) {\n            objectives.push(\n                Objective({\n                    name: _targetObjectives[i],\n                    reward: _rewards[i],\n                    authority: _authorities[i]\n                })\n            );\n            totalPointsPossible += _rewards[i];\n        }\n\n        if (\n            _tiersSortingActive &&\n            _tierNames.length > 0 &&\n            _tierRewardsRequired.length > 0\n        ) {\n            addTiers(_tierNames, _tierRewardsRequired);\n        }\n\n        emit LoyaltyProgramCreated(_name, msg.sender, _rewardType);\n    }\n\n    function version() public pure returns (string memory) {\n        return VERSION;\n    }\n\n    function state() public view returns (LoyaltyState) {\n        if (canceled) {\n            return LoyaltyState.Canceled;\n        }\n\n        if (block.timestamp >= programEndsAt) {\n            return LoyaltyState.Completed;\n        }\n\n        if (programEndsAt > block.timestamp && isActive) {\n            return LoyaltyState.Active;\n        }\n\n        return LoyaltyState.Idle;\n    }\n\n    function addTiers(\n        bytes32[] memory _tierNames,\n        uint256[] memory _tierRewardsRequired\n    ) private {\n        if (_tierNames.length != _tierRewardsRequired.length)\n            revert TierNameAndRewardMismatch();\n\n        if (_tierNames.length > MAX_TIERS_LENGTH) revert MaxTierExceeded();\n\n        if (!areTiersAscendingNoDuplicates(_tierRewardsRequired))\n            revert TierRewardsMustBeInAscendingOrder();\n\n        if (_tierRewardsRequired[0] == 0) {\n            for (uint256 i = 0; i < _tierRewardsRequired.length; i++) {\n                tiers[i] = Tier({\n                    name: _tierNames[i],\n                    rewardsRequired: _tierRewardsRequired[i]\n                });\n            }\n            tierCount += _tierRewardsRequired.length;\n        } else {\n            tiers[0] = Tier({\n                name: bytes32(\"Default tier\"),\n                rewardsRequired: 0\n            });\n            for (uint256 i = 0; i < _tierRewardsRequired.length; i++) {\n                tiers[i + 1] = Tier({\n                    name: _tierNames[i],\n                    rewardsRequired: _tierRewardsRequired[i]\n                });\n            }\n            tierCount += _tierRewardsRequired.length + 1;\n        }\n        tiersAreActive = true;\n    }\n\n    function completeUserAuthorityObjective(\n        uint256 _objectiveIndex,\n        address _user\n    ) external {\n        if (msg.sender != _user && !isRelayer[msg.sender]) {\n            revert OnlyUserOrRelay();\n        }\n        if (_user == address(0)) revert UserCanNotBeZeroAddress();\n        if (!isActive) revert ProgramMustBeActive();\n\n        Objective memory objective = objectives[_objectiveIndex];\n\n        if (_objectiveIndex >= objectives.length) {\n            revert InvalidObjective();\n        }\n\n        bool alreadyCompletedObjective = users[_user].completedObjectives[\n            _objectiveIndex\n        ];\n\n        if (alreadyCompletedObjective) {\n            revert ObjectiveAlreadyCompleted(_objectiveIndex, _user);\n        }\n\n        users[_user].completedObjectives[_objectiveIndex] = true;\n        users[_user].rewardsEarned += objective.reward;\n        users[_user].objectivesCompletedCount++;\n\n        handleEscrowRewards(_user, _objectiveIndex);\n\n        emit ObjectiveCompleted(\n            _user,\n            _objectiveIndex,\n            block.timestamp,\n            users[_user].rewardsEarned\n        );\n    }\n\n    function completeCreatorAuthorityObjective(\n        uint256 _objectiveIndex,\n        address _user\n    ) external {\n        if (msg.sender != creator) revert OnlyCreatorCanCall();\n        if (_user == address(0)) revert UserCanNotBeZeroAddress();\n        if (!isActive) revert ProgramMustBeActive();\n\n        Objective memory objective = objectives[_objectiveIndex];\n\n        if (_objectiveIndex >= objectives.length) {\n            revert InvalidObjective();\n        }\n\n        bool alreadyCompletedObjective = users[_user].completedObjectives[\n            _objectiveIndex\n        ];\n\n        if (alreadyCompletedObjective) {\n            revert ObjectiveAlreadyCompleted(_objectiveIndex, _user);\n        }\n\n        users[_user].completedObjectives[_objectiveIndex] = true;\n        users[_user].rewardsEarned += objective.reward;\n        users[_user].objectivesCompletedCount++;\n\n        handleEscrowRewards(_user, _objectiveIndex);\n\n        emit ObjectiveCompleted(\n            _user,\n            _objectiveIndex,\n            block.timestamp,\n            users[_user].rewardsEarned\n        );\n    }\n\n    function givePointsToUser(address _user, uint256 _points) external {\n        if (msg.sender != creator && !isRelayer[msg.sender]) {\n            revert OnlyCreatorOrRelay();\n        }\n        if (_user == address(0)) revert UserCanNotBeZeroAddress();\n        if (!isActive) revert ProgramMustBeActive();\n        if (_points == 0 || _points > totalPointsPossible) revert();\n\n        uint256 pointsGivenCopy = greatestPointsGiven;\n        userToPointsGiven[_user] += _points;\n\n        if (userToPointsGiven[_user] > greatestPointsGiven) {\n            greatestPointsGiven = userToPointsGiven[_user];\n            totalPointsPossible += greatestPointsGiven - pointsGivenCopy;\n        }\n\n        users[_user].rewardsEarned += _points;\n\n        handleEscrowRewards(_user, 0);\n\n        emit PointsUpdate(\n            _user,\n            users[_user].rewardsEarned,\n            _points,\n            block.timestamp\n        );\n    }\n\n    function deductPointsFromUser(address _user, uint256 _points) external {\n        if (msg.sender != creator && !isRelayer[msg.sender]) {\n            revert OnlyCreatorOrRelay();\n        }\n        if (_user == address(0)) revert UserCanNotBeZeroAddress();\n        if (!isActive) revert ProgramMustBeActive();\n\n        if (_points == 0 || _points > users[_user].rewardsEarned) {\n            revert();\n        }\n\n        users[_user].rewardsEarned -= _points;\n\n        updateUserTierProgress(_user, 0);\n        emit PointsUpdate(\n            _user,\n            users[_user].rewardsEarned,\n            _points,\n            block.timestamp\n        );\n    }\n\n    function handleEscrowRewards(\n        address _user,\n        uint256 _objectiveIndex\n    ) private {\n        if (tiersAreActive) {\n            updateUserTierProgress(_user, _objectiveIndex);\n        }\n\n        if (rewardType == RewardType.ERC20 && !tiersAreActive) {\n            erc20EscrowContract.handleRewardsUnlock(\n                _user,\n                _objectiveIndex,\n                0,\n                new uint256[](0)\n            );\n        }\n\n        if (rewardType == RewardType.ERC721 && !tiersAreActive) {\n            erc721EscrowContract.handleRewardsUnlock(_user, _objectiveIndex, 0);\n        }\n\n        if (rewardType == RewardType.ERC1155 && !tiersAreActive) {\n            erc1155EscrowContract.handleRewardsUnlock(\n                _user,\n                _objectiveIndex,\n                0,\n                new uint256[](0)\n            );\n        }\n    }\n\n    function updateUserTierProgress(\n        address _user,\n        uint256 _objectiveIndex\n    ) private {\n        uint256 userRewards = users[_user].rewardsEarned;\n        uint256 currentTier = 0;\n        uint256 passedTierCount = 0;\n\n        for (uint256 i = 0; i < tierCount; i++) {\n            if (userRewards >= tiers[i].rewardsRequired) {\n                currentTier = i;\n                passedTierCount++;\n            }\n        }\n\n        if (rewardType == RewardType.ERC721) {\n            erc721EscrowContract.handleRewardsUnlock(\n                _user,\n                _objectiveIndex,\n                currentTier\n            );\n        }\n\n        if (\n            rewardType == RewardType.ERC1155 || rewardType == RewardType.ERC20\n        ) {\n            uint256[] memory passedTiers = new uint256[](passedTierCount);\n            uint256 index = 0;\n            for (uint256 i = 0; i < tierCount; i++) {\n                if (userRewards >= tiers[i].rewardsRequired) {\n                    passedTiers[index] = i;\n                    index++;\n                }\n            }\n\n            if (rewardType == RewardType.ERC1155) {\n                erc1155EscrowContract.handleRewardsUnlock(\n                    _user,\n                    _objectiveIndex,\n                    currentTier,\n                    passedTiers\n                );\n            }\n            if (rewardType == RewardType.ERC20) {\n                erc20EscrowContract.handleRewardsUnlock(\n                    _user,\n                    _objectiveIndex,\n                    currentTier,\n                    passedTiers\n                );\n            }\n        }\n        users[_user].currentTier = currentTier;\n    }\n\n    function getObjectives() external view returns (Objective[] memory) {\n        return objectives;\n    }\n\n    function getUserProgression(\n        address _user\n    ) external view returns (uint256 rewardsEarned, uint256 currentTier) {\n        return (users[_user].rewardsEarned, users[_user].currentTier);\n    }\n\n    function getUserObjectivesCompleteCount(\n        address _user\n    ) external view returns (uint256) {\n        return users[_user].objectivesCompletedCount;\n    }\n\n    function getUserCompletedObjectives(\n        address _userAddress\n    ) external view returns (bool[] memory) {\n        bool[] memory completionStatus = new bool[](objectives.length);\n\n        for (uint256 i = 0; i < objectives.length; i++) {\n            completionStatus[i] = users[_userAddress].completedObjectives[i];\n        }\n        return completionStatus;\n    }\n\n    function getBasicLoyaltyProgramDetails()\n        public\n        view\n        returns (string memory, address, bool, uint256)\n    {\n        return (name, creator, isActive, programEndsAt);\n    }\n\n    function getLoyaltyProgramSettings()\n        public\n        view\n        returns (bool, uint256, uint256, RewardType, Objective[] memory)\n    {\n        return (\n            tiersAreActive,\n            tierCount,\n            totalPointsPossible,\n            rewardType,\n            objectives\n        );\n    }\n\n    function setEscrowContract(\n        address _contract,\n        RewardType _rewardType\n    ) external {\n        if (msg.sender != creator) revert OnlyCreatorCanCall();\n        if (_rewardType == RewardType.ERC20) {\n            erc20EscrowContract = ILoyaltyERC20Escrow(_contract);\n        } else if (_rewardType == RewardType.ERC721) {\n            erc721EscrowContract = ILoyaltyERC721Escrow(_contract);\n        } else if (_rewardType == RewardType.ERC1155) {\n            erc1155EscrowContract = ILoyaltyERC1155Escrow(_contract);\n        }\n    }\n\n    function setLoyaltyProgramActive() external {\n        if (msg.sender != creator) {\n            revert OnlyCreatorOrRelay();\n        }\n        isActive = true;\n        emit LoyaltyProgramActive(msg.sender, block.timestamp);\n    }\n\n    function setRelayer(address _relayer) external {\n        if (msg.sender != creator) revert OnlyCreatorCanCall();\n        isRelayer[_relayer] = true;\n    }\n}\n"
    },
    "contracts/Loyalty0.03/modules/LoyaltyERC1155Escrow.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport \"../LoyaltyProgram.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"hardhat/console.sol\";\n\ncontract LoyaltyERC1155Escrow is ERC1155Holder, Ownable {\n    enum EscrowState {\n        Idle,\n        DepositPeriod,\n        AwaitingEscrowSettings,\n        InIssuance,\n        Completed,\n        Frozen,\n        Canceled\n    }\n\n    enum RewardCondition {\n        NotSet,\n        EachObjective,\n        SingleObjective,\n        EachTier,\n        SingleTier,\n        PointsTotal\n    }\n\n    struct UserAccount {\n        bool allFundsLocked;\n        bool allFundsPaid;\n        UserTokenBalance[] rewardedTokenBalances;\n        mapping(uint256 => bool) rewardGoalRewarded;\n    }\n\n    struct UserTokenBalance {\n        uint256 tokenId;\n        uint256 amount;\n    }\n\n    struct Escrow {\n        uint256 totalTokenIds;\n        uint256 rewardGoal;\n        address collectionAddress;\n        RewardCondition rewardCondition;\n        Token[] tokens;\n        bool allFundsPaid;\n    }\n\n    struct EscrowPayoutDetails {\n        uint256 tokenId;\n        uint256 amount;\n    }\n\n    struct Token {\n        uint256 id;\n        uint256 value;\n    }\n\n    event ERC1155TokenReceived(\n        address indexed collection,\n        address indexed sender,\n        uint256 tokenId,\n        uint256 receivedAt\n    );\n    event ERC1155BatchReceived(\n        address indexed collection,\n        address indexed sender,\n        uint256[] tokenIds,\n        uint256 receivedAt\n    );\n    event ERC1155Rewarded(\n        address user,\n        uint256 token,\n        uint256 amount,\n        uint256 rewardedAt\n    );\n    event ERC1155CreatorWithdrawAll(\n        address creator,\n        uint256[] tokenIds,\n        uint256[] amounts,\n        uint256 withdrawnAt\n    );\n    event ERC1155UserWithdrawAll(\n        address user,\n        uint256[] tokenIds,\n        uint256[] amounts,\n        uint256 withdrawnAt\n    );\n    event ERC1155CreatorWithdraw(\n        address creator,\n        uint256 tokenId,\n        uint256 amount,\n        uint256 withdrawnAt\n    );\n    event FrozenStateChange(address team, bool frozen, uint256 updatedAt);\n\n    string public constant VERSION = \"0.03\";\n    address public constant TEAM_ADDRESS =\n        0x262dE7a263d23BeA5544b7a0BF08F2c00BFABE7b;\n    uint256 public constant MAX_DEPOSITORS = 2;\n\n    LoyaltyProgram public loyaltyProgram;\n    address public loyaltyProgramAddress;\n\n    address public creator;\n    uint256 public constant PAYOUT_BUFFER = 4;\n    uint256 public maxTokenIdsAllowed = 5;\n\n    uint256 loyaltyProgramEndsAt;\n    uint256 depositStartDate;\n    uint256 depositEndDate;\n\n    bool public areEscrowSettingsSet;\n    bool public inIssuance;\n    bool public isDepositKeySet;\n    bool public allFundsLocked;\n    bool public canceled;\n\n    mapping(address => bool) isApprovedSender;\n    mapping(address => bool) isCollectionLoyaltyProgramApproved;\n    mapping(bytes32 => bool) private validDepositKeys;\n\n    mapping(address => UserAccount) userAccount;\n    Escrow public escrow;\n    mapping(uint256 => uint256) tokenBalances;\n    mapping(uint256 => EscrowPayoutDetails) payoutIndexToPayouts;\n\n    error OnlyTeamCanCall();\n    error OnlyCreatorCanCall();\n\n    error ExceededMaxTokenIdsAmount();\n    error ExceededMaxDepositors();\n    error OnlyLoyaltyProgramCanCall();\n\n    error LoyaltyProgramMustBeIdle();\n    error LoyaltyProgramMustBeCompleted();\n    error IncorrectRewardType();\n    error IncorrectRewardCondition();\n    error DepositsAreLocked();\n    error DepositPeriodMustBeAtLeastOneHour();\n    error DepositPeriodMustBeFinished();\n    error DepositEndDateExceedsProgramEnd();\n\n    error TokenIdsAndPayoutsLengthMismatch();\n    error TokenIdsAndValuesLengthMismatch();\n\n    error TiersMustBeActiveToUseTiersRewardCondition();\n\n    error PayoutCannotBeZero();\n    error InsufficientBalanceForATokenId();\n\n    error NotInIssuance();\n    error NoTokensToWithdraw();\n    error FundsAreLocked();\n\n    constructor(\n        address _loyaltyProgramAddress,\n        address _creator,\n        uint256 _programEndsAt,\n        address _rewardTokenAddress,\n        address[] memory _approvedDepositors\n    ) {\n        creator = _creator;\n        loyaltyProgram = LoyaltyProgram(_loyaltyProgramAddress);\n        loyaltyProgramAddress = _loyaltyProgramAddress;\n        loyaltyProgramEndsAt = _programEndsAt;\n\n        if (_approvedDepositors.length > MAX_DEPOSITORS) {\n            revert ExceededMaxDepositors();\n        }\n\n        for (uint256 i = 0; i < _approvedDepositors.length; i++) {\n            isApprovedSender[_approvedDepositors[i]] = true;\n        }\n        isApprovedSender[_creator] = true;\n        isCollectionLoyaltyProgramApproved[_rewardTokenAddress] = true;\n    }\n\n    function version() public pure returns (string memory) {\n        return VERSION;\n    }\n\n    function escrowState() public view returns (EscrowState) {\n        if (\n            canceled ||\n            loyaltyProgram.state() == LoyaltyProgram.LoyaltyState.Canceled\n        ) {\n            return EscrowState.Canceled;\n        }\n        if (allFundsLocked) return EscrowState.Frozen;\n\n        if (\n            depositStartDate <= block.timestamp &&\n            depositEndDate >= block.timestamp &&\n            isDepositKeySet\n        ) {\n            return EscrowState.DepositPeriod;\n        }\n        if (\n            block.timestamp > depositEndDate &&\n            !areEscrowSettingsSet &&\n            isDepositKeySet\n        ) {\n            return EscrowState.AwaitingEscrowSettings;\n        }\n        if (\n            inIssuance &&\n            loyaltyProgram.state() == LoyaltyProgram.LoyaltyState.Active\n        ) {\n            return EscrowState.InIssuance;\n        }\n\n        if (\n            loyaltyProgram.state() == LoyaltyProgram.LoyaltyState.Completed ||\n            escrow.allFundsPaid\n        ) {\n            return EscrowState.Completed;\n        }\n\n        return EscrowState.Idle;\n    }\n\n    function onERC1155Received(\n        address _operator,\n        address _from,\n        uint256 _tokenId,\n        uint256 _value,\n        bytes memory _data\n    ) public virtual override returns (bytes4) {\n        runOnERC1155ReceivedChecks(_operator, _from, _data);\n\n        uint256[] memory tokenIds = new uint256[](1);\n        uint256[] memory values = new uint256[](1);\n\n        for (uint256 i = 0; i < 1; i++) {\n            tokenIds[i] = _tokenId;\n            values[i] = _value;\n        }\n        parseTokensAddToEscrow(_msgSender(), tokenIds, values);\n\n        emit ERC1155TokenReceived(\n            _msgSender(),\n            _from,\n            _tokenId,\n            block.timestamp\n        );\n        return IERC1155Receiver.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(\n        address _operator,\n        address _from,\n        uint256[] memory _tokenIds,\n        uint256[] memory _values,\n        bytes memory _data\n    ) public virtual override returns (bytes4) {\n        runOnERC1155ReceivedChecks(_operator, _from, _data);\n\n        parseTokensAddToEscrow(_msgSender(), _tokenIds, _values);\n\n        emit ERC1155BatchReceived(\n            _msgSender(),\n            _from,\n            _tokenIds,\n            block.timestamp\n        );\n\n        return IERC1155Receiver.onERC1155BatchReceived.selector;\n    }\n\n    function parseTokensAddToEscrow(\n        address _collectionAddress,\n        uint256[] memory _tokenIds,\n        uint256[] memory _values\n    ) private {\n        if (_tokenIds.length != _values.length) {\n            revert TokenIdsAndValuesLengthMismatch();\n        }\n\n        if (\n            escrow.totalTokenIds > maxTokenIdsAllowed ||\n            _tokenIds.length > maxTokenIdsAllowed\n        ) {\n            revert ExceededMaxTokenIdsAmount();\n        }\n\n        if (escrow.totalTokenIds == 0) {\n            escrow.collectionAddress = _collectionAddress;\n        }\n\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\n            if (tokenBalances[_tokenIds[i]] != 0) {\n                for (uint256 j = 0; j < escrow.tokens.length; j++) {\n                    if (escrow.tokens[j].id == _tokenIds[i]) {\n                        escrow.tokens[j].value += _values[i];\n                        break;\n                    }\n                }\n            } else {\n                escrow.tokens.push(\n                    Token({id: _tokenIds[i], value: _values[i]})\n                );\n                escrow.totalTokenIds++;\n            }\n            tokenBalances[_tokenIds[i]] += _values[i];\n        }\n    }\n\n    function handleRewardsUnlock(\n        address _user,\n        uint256 _objIndex,\n        uint256 _tierIndex,\n        uint256[] memory _passedTiers\n    ) external {\n        if (msg.sender != loyaltyProgramAddress)\n            revert OnlyLoyaltyProgramCanCall();\n\n        if (escrowState() != EscrowState.InIssuance) revert NotInIssuance();\n        if (escrow.rewardCondition == RewardCondition.NotSet) {\n            revert IncorrectRewardCondition();\n        }\n\n        if (\n            escrow.rewardCondition == RewardCondition.EachObjective ||\n            escrow.rewardCondition == RewardCondition.SingleObjective\n        ) {\n            unlockRewardsByObjective(_user, _objIndex);\n        } else if (\n            escrow.rewardCondition == RewardCondition.EachTier ||\n            escrow.rewardCondition == RewardCondition.SingleTier\n        ) {\n            unlockRewardsByTier(_user, _tierIndex, _passedTiers);\n        } else {\n            unlockRewardsByPointsTotal(_user);\n        }\n    }\n\n    function unlockRewardsByObjective(\n        address _user,\n        uint256 _objIndex\n    ) private {\n        UserAccount storage user = userAccount[_user];\n        bool rewardAlreadyRewarded = user.rewardGoalRewarded[_objIndex];\n        EscrowPayoutDetails storage payout = payoutIndexToPayouts[_objIndex];\n\n        if (\n            tokenBalances[payout.tokenId] >= payout.amount &&\n            !rewardAlreadyRewarded\n        ) {\n            if (payout.amount > 0) {\n                user.rewardGoalRewarded[_objIndex] = true;\n                user.rewardedTokenBalances.push(\n                    UserTokenBalance({\n                        tokenId: payout.tokenId,\n                        amount: payout.amount\n                    })\n                );\n                tokenBalances[payout.tokenId] -= payout.amount;\n                emit ERC1155Rewarded(\n                    _user,\n                    payout.tokenId,\n                    payout.amount,\n                    block.timestamp\n                );\n            }\n        }\n    }\n\n    function unlockRewardsByTier(\n        address _user,\n        uint256 _tierIndex,\n        uint256[] memory _passedTiers\n    ) private {\n        UserAccount storage user = userAccount[_user];\n        if (escrow.rewardCondition == RewardCondition.EachTier) {\n            for (uint256 i = 0; i < _passedTiers.length; i++) {\n                uint256 tierIndex = _passedTiers[i];\n                bool alreadyRewardedTier = user.rewardGoalRewarded[tierIndex];\n\n                if (!alreadyRewardedTier && tierIndex != 0) {\n                    EscrowPayoutDetails storage payout = payoutIndexToPayouts[\n                        tierIndex\n                    ];\n\n                    if (\n                        payout.amount > 0 &&\n                        tokenBalances[payout.tokenId] >= payout.amount\n                    ) {\n                        user.rewardGoalRewarded[tierIndex] = true;\n                        user.rewardedTokenBalances.push(\n                            UserTokenBalance({\n                                tokenId: payout.tokenId,\n                                amount: payout.amount\n                            })\n                        );\n                        tokenBalances[payout.tokenId] -= payout.amount;\n                        emit ERC1155Rewarded(\n                            _user,\n                            payout.tokenId,\n                            payout.amount,\n                            block.timestamp\n                        );\n                    }\n                }\n            }\n        } else if (escrow.rewardCondition == RewardCondition.SingleTier) {\n            bool alreadyRewardedTier = user.rewardGoalRewarded[\n                escrow.rewardGoal\n            ];\n            EscrowPayoutDetails storage payout = payoutIndexToPayouts[\n                escrow.rewardGoal\n            ];\n            if (\n                !alreadyRewardedTier &&\n                tokenBalances[payout.tokenId] >= payout.amount\n            ) {\n                if (payout.amount > 0 && _tierIndex >= escrow.rewardGoal) {\n                    user.rewardGoalRewarded[escrow.rewardGoal] = true;\n                    user.rewardedTokenBalances.push(\n                        UserTokenBalance({\n                            tokenId: payout.tokenId,\n                            amount: payout.amount\n                        })\n                    );\n                    tokenBalances[payout.tokenId] -= payout.amount;\n                    emit ERC1155Rewarded(\n                        _user,\n                        payout.tokenId,\n                        payout.amount,\n                        block.timestamp\n                    );\n                }\n            }\n        }\n    }\n\n    function unlockRewardsByPointsTotal(address _user) private {\n        (uint256 rewardsEarned, ) = loyaltyProgram.getUserProgression(_user);\n\n        UserAccount storage user = userAccount[_user];\n        bool rewardAlreadyRewarded = user.rewardGoalRewarded[escrow.rewardGoal];\n\n        if (rewardsEarned >= escrow.rewardGoal && !rewardAlreadyRewarded) {\n            EscrowPayoutDetails storage payout = payoutIndexToPayouts[\n                escrow.rewardGoal\n            ];\n\n            if (tokenBalances[payout.tokenId] >= payout.amount) {\n                user.rewardGoalRewarded[escrow.rewardGoal] = true;\n                user.rewardedTokenBalances.push(\n                    UserTokenBalance({\n                        tokenId: payout.tokenId,\n                        amount: payout.amount\n                    })\n                );\n                tokenBalances[payout.tokenId] -= payout.amount;\n                emit ERC1155Rewarded(\n                    _user,\n                    payout.tokenId,\n                    payout.amount,\n                    block.timestamp\n                );\n            }\n        }\n    }\n\n    function userWithdrawAll() external {\n        UserAccount storage user = userAccount[msg.sender];\n        UserTokenBalance[] storage userBalance = user.rewardedTokenBalances;\n\n        if (user.allFundsPaid || userBalance.length == 0)\n            revert NoTokensToWithdraw();\n\n        if (user.allFundsLocked || escrowState() == EscrowState.Frozen)\n            revert FundsAreLocked();\n\n        uint256[] memory rewardedTokenIds = new uint256[](userBalance.length);\n        uint256[] memory rewardedTokenAmounts = new uint256[](\n            userBalance.length\n        );\n\n        for (uint256 i = 0; i < userBalance.length; i++) {\n            if (userBalance[i].amount > 0) {\n                rewardedTokenIds[i] = userBalance[i].tokenId;\n                rewardedTokenAmounts[i] = userBalance[i].amount;\n            }\n        }\n\n        ERC1155 collection = ERC1155(escrow.collectionAddress);\n        collection.safeBatchTransferFrom(\n            address(this),\n            msg.sender,\n            rewardedTokenIds,\n            rewardedTokenAmounts,\n            bytes(\"\")\n        );\n        user.allFundsPaid = true;\n        delete user.rewardedTokenBalances;\n\n        emit ERC1155UserWithdrawAll(\n            msg.sender,\n            rewardedTokenIds,\n            rewardedTokenAmounts,\n            block.timestamp\n        );\n    }\n\n    function creatorWithdrawAllBalance() external {\n        if (msg.sender != creator) revert OnlyCreatorCanCall();\n        if (escrowState() != EscrowState.Completed)\n            revert LoyaltyProgramMustBeCompleted();\n        if (escrow.totalTokenIds == 0 || escrow.allFundsPaid)\n            revert NoTokensToWithdraw();\n\n        uint256[] memory tokenAmounts = new uint256[](escrow.tokens.length);\n        uint256[] memory tokenIds = new uint256[](escrow.tokens.length);\n\n        for (uint256 i = 0; i < escrow.tokens.length; i++) {\n            uint256 tokenBalance = tokenBalances[escrow.tokens[i].id];\n            uint256 tokenId = escrow.tokens[i].id;\n            if (tokenBalance > 0) {\n                tokenIds[i] = tokenId;\n                tokenAmounts[i] = tokenBalance;\n                tokenBalances[tokenId] -= tokenBalances[tokenId];\n            }\n        }\n\n        ERC1155 collection = ERC1155(escrow.collectionAddress);\n        collection.safeBatchTransferFrom(\n            address(this),\n            msg.sender,\n            tokenIds,\n            tokenAmounts,\n            bytes(\"\")\n        );\n\n        emit ERC1155CreatorWithdrawAll(\n            msg.sender,\n            tokenIds,\n            tokenAmounts,\n            block.timestamp\n        );\n\n        delete escrow.tokens;\n        escrow.allFundsPaid = true;\n        escrow.totalTokenIds = 0;\n    }\n\n    function creatorWithdrawToken(uint256 _tokenId, uint256 _amount) external {\n        if (msg.sender != creator) revert OnlyCreatorCanCall();\n        if (escrowState() != EscrowState.Completed)\n            revert LoyaltyProgramMustBeCompleted();\n\n        uint256 withdrawAmount = tokenBalances[_tokenId];\n\n        if (\n            escrow.totalTokenIds == 0 ||\n            escrow.allFundsPaid ||\n            _amount == 0 ||\n            withdrawAmount == 0\n        ) {\n            revert NoTokensToWithdraw();\n        }\n\n        ERC1155 collection = ERC1155(escrow.collectionAddress);\n        collection.safeTransferFrom(\n            address(this),\n            msg.sender,\n            _tokenId,\n            withdrawAmount,\n            bytes(\"\")\n        );\n\n        tokenBalances[_tokenId] -= withdrawAmount;\n\n        emit ERC1155CreatorWithdraw(\n            msg.sender,\n            _tokenId,\n            withdrawAmount,\n            block.timestamp\n        );\n    }\n\n    function setEscrowSettingsBasic(\n        RewardCondition _condition,\n        uint256 _tokenId,\n        uint256 _payout,\n        uint256 _rewardGoal\n    ) external {\n        runSetEscrowSettingsChecksBasic(_condition, _payout, _tokenId);\n        (\n            bool tiersAreActive,\n            uint256 tierCount,\n            uint256 totalPointsPossible,\n            LoyaltyProgram.RewardType rewardType,\n            LoyaltyProgram.Objective[] memory objectives\n        ) = loyaltyProgram.getLoyaltyProgramSettings();\n\n        if (rewardType != LoyaltyProgram.RewardType.ERC1155) {\n            revert IncorrectRewardType();\n        }\n\n        if (escrowState() != EscrowState.AwaitingEscrowSettings) {\n            revert DepositPeriodMustBeFinished();\n        }\n\n        if (_condition == RewardCondition.SingleObjective) {\n            require(_rewardGoal < objectives.length, \"Invalid objective index\");\n\n            assignPayoutIndexToPayoutRewardGoal(_tokenId, _payout, _rewardGoal);\n        } else if (_condition == RewardCondition.SingleTier) {\n            if (!tiersAreActive)\n                revert TiersMustBeActiveToUseTiersRewardCondition();\n            require(\n                _rewardGoal < tierCount && _rewardGoal > 0 && tierCount > 0,\n                \"Invalid tier index\"\n            );\n            assignPayoutIndexToPayoutRewardGoal(_tokenId, _payout, _rewardGoal);\n        } else if (_condition == RewardCondition.PointsTotal) {\n            require(\n                _rewardGoal <= totalPointsPossible && _rewardGoal > 0,\n                \"Points goal unreachable\"\n            );\n            assignPayoutIndexToPayoutRewardGoal(_tokenId, _payout, _rewardGoal);\n        }\n        escrow.rewardGoal = _rewardGoal;\n        escrow.rewardCondition = _condition;\n        inIssuance = true;\n        areEscrowSettingsSet = true;\n    }\n\n    function setEscrowSettingsAdvanced(\n        RewardCondition _condition,\n        uint256[] calldata _tokenIds,\n        uint256[] calldata _payouts\n    ) external {\n        runSetEscrowSettingsChecksAdvanced(_condition, _tokenIds, _payouts);\n        (\n            bool tiersAreActive,\n            uint256 tierCount,\n            ,\n            LoyaltyProgram.RewardType rewardType,\n            LoyaltyProgram.Objective[] memory objectives\n        ) = loyaltyProgram.getLoyaltyProgramSettings();\n\n        if (rewardType != LoyaltyProgram.RewardType.ERC1155) {\n            revert IncorrectRewardType();\n        }\n\n        if (escrowState() != EscrowState.AwaitingEscrowSettings) {\n            revert DepositPeriodMustBeFinished();\n        }\n\n        verifyTokenBalances(_tokenIds, _payouts);\n\n        if (_condition == RewardCondition.EachObjective) {\n            require(objectives.length == _tokenIds.length, \"Mismatch\");\n            assignPayoutIndexToPayout(_tokenIds, _payouts);\n            escrow.rewardCondition = RewardCondition.EachObjective;\n        } else if (_condition == RewardCondition.EachTier) {\n            if (!tiersAreActive)\n                revert TiersMustBeActiveToUseTiersRewardCondition();\n            require(tierCount == _tokenIds.length, \"Mismatch\");\n            require(\n                _tokenIds[0] == 0 && _payouts[0] == 0,\n                \"First index cannot payout\"\n            );\n            assignPayoutIndexToPayout(_tokenIds, _payouts);\n            escrow.rewardCondition = RewardCondition.EachTier;\n        }\n        inIssuance = true;\n        areEscrowSettingsSet = true;\n    }\n\n    function runSetEscrowSettingsChecksBasic(\n        RewardCondition _condition,\n        uint256 _payout,\n        uint256 _tokenId\n    ) private view {\n        if (msg.sender != creator) revert OnlyCreatorCanCall();\n        if (loyaltyProgram.state() != LoyaltyProgram.LoyaltyState.Idle) {\n            revert LoyaltyProgramMustBeIdle();\n        }\n        if (\n            _condition != RewardCondition.SingleObjective &&\n            _condition != RewardCondition.SingleTier &&\n            _condition != RewardCondition.PointsTotal\n        ) {\n            revert IncorrectRewardCondition();\n        }\n        if (_payout == 0) revert PayoutCannotBeZero();\n        if (tokenBalances[_tokenId] < _payout * PAYOUT_BUFFER) {\n            revert InsufficientBalanceForATokenId();\n        }\n    }\n\n    function runSetEscrowSettingsChecksAdvanced(\n        RewardCondition _condition,\n        uint256[] calldata _payouts,\n        uint256[] calldata _tokenIds\n    ) private view {\n        if (msg.sender != creator) revert OnlyCreatorCanCall();\n        if (loyaltyProgram.state() != LoyaltyProgram.LoyaltyState.Idle) {\n            revert LoyaltyProgramMustBeIdle();\n        }\n        if (\n            _condition != RewardCondition.EachObjective &&\n            _condition != RewardCondition.EachTier\n        ) {\n            revert IncorrectRewardCondition();\n        }\n        if (_tokenIds.length != _payouts.length || _tokenIds.length == 0) {\n            revert TokenIdsAndPayoutsLengthMismatch();\n        }\n    }\n\n    function runOnERC1155ReceivedChecks(\n        address _operator,\n        address _from,\n        bytes memory _data\n    ) private view {\n        require(\n            isSenderApproved(_from) && isSenderApproved(_operator),\n            \"Not an approved sender\"\n        );\n        require(isCollectionApproved(_msgSender()), \"Collection not approved\");\n        require(_data.length >= 32, \"Invalid data length\");\n\n        bytes32 depositKey;\n\n        assembly {\n            depositKey := mload(add(_data, 32))\n        }\n        require(validDepositKeys[depositKey], \"Invalid deposit key\");\n\n        if (escrowState() != EscrowState.DepositPeriod) {\n            revert DepositsAreLocked();\n        }\n    }\n\n    function verifyTokenBalances(\n        uint256[] memory _tokenIds,\n        uint256[] memory _payouts\n    ) private view {\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\n            if (tokenBalances[_tokenIds[i]] < _payouts[i] * PAYOUT_BUFFER) {\n                revert InsufficientBalanceForATokenId();\n            }\n        }\n    }\n\n    function assignPayoutIndexToPayout(\n        uint256[] calldata _tokenIds,\n        uint256[] calldata _payouts\n    ) private {\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\n            payoutIndexToPayouts[i] = EscrowPayoutDetails({\n                tokenId: _tokenIds[i],\n                amount: _payouts[i]\n            });\n        }\n    }\n\n    function assignPayoutIndexToPayoutRewardGoal(\n        uint256 _tokenId,\n        uint256 _payout,\n        uint256 _rewardGoal\n    ) private {\n        payoutIndexToPayouts[_rewardGoal] = EscrowPayoutDetails({\n            tokenId: _tokenId,\n            amount: _payout\n        });\n    }\n\n    function isCollectionApproved(\n        address _collectionAddress\n    ) public view returns (bool) {\n        return isCollectionLoyaltyProgramApproved[_collectionAddress];\n    }\n\n    function isSenderApproved(address _sender) public view returns (bool) {\n        return isApprovedSender[_sender];\n    }\n\n    function getLoyaltyProgram() public view returns (LoyaltyProgram) {\n        return loyaltyProgram;\n    }\n\n    function getEscrowTokenDetails()\n        public\n        view\n        returns (\n            uint256 totalTokenIds,\n            address collectionAddress,\n            Token[] memory tokens\n        )\n    {\n        return (escrow.totalTokenIds, escrow.collectionAddress, escrow.tokens);\n    }\n\n    function getEscrowTokenBalance(\n        uint256 _tokenId\n    ) public view returns (uint256) {\n        return tokenBalances[_tokenId];\n    }\n\n    function getEscrowRewardDetails()\n        external\n        view\n        returns (uint256 rewardGoal, RewardCondition rewardCondition)\n    {\n        return (escrow.rewardGoal, escrow.rewardCondition);\n    }\n\n    function getPayoutInfo(\n        uint256 _rewardGoal\n    ) public view returns (uint256 tokenId, uint256 payoutAmount) {\n        return (\n            payoutIndexToPayouts[_rewardGoal].tokenId,\n            payoutIndexToPayouts[_rewardGoal].amount\n        );\n    }\n\n    function getUserRewards(\n        address _user\n    ) public view returns (UserTokenBalance[] memory) {\n        return userAccount[_user].rewardedTokenBalances;\n    }\n\n    function setDepositKey(bytes32 key, uint256 _depositEndDate) external {\n        if (msg.sender != creator) revert OnlyCreatorCanCall();\n\n        uint256 minimumDepositPeriod = 1 hours;\n        uint256 depositToProgramEndBuffer = 4 hours;\n        if (_depositEndDate <= block.timestamp + minimumDepositPeriod) {\n            revert DepositPeriodMustBeAtLeastOneHour();\n        }\n\n        if (\n            _depositEndDate >= loyaltyProgramEndsAt + depositToProgramEndBuffer\n        ) {\n            revert DepositEndDateExceedsProgramEnd();\n        }\n        validDepositKeys[key] = true;\n        depositStartDate = block.timestamp;\n        depositEndDate = _depositEndDate;\n        isDepositKeySet = true;\n    }\n\n    function emergencyFreeze(bool _isFrozen) external {\n        if (msg.sender != TEAM_ADDRESS) revert OnlyTeamCanCall();\n        allFundsLocked = _isFrozen;\n        emit FrozenStateChange(msg.sender, _isFrozen, block.timestamp);\n    }\n\n    function cancelProgramEscrow() external {\n        if (msg.sender != creator) revert OnlyCreatorCanCall();\n        canceled = true;\n    }\n}\n"
    },
    "contracts/Loyalty0.03/modules/LoyaltyERC20Escrow.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport \"../LoyaltyProgram.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\ncontract LoyaltyERC20Escrow {\n    using SafeERC20 for IERC20;\n\n    enum EscrowState {\n        Idle,\n        DepositPeriod,\n        AwaitingEscrowSettings,\n        InIssuance,\n        Completed,\n        Frozen,\n        Canceled\n    }\n\n    enum RewardCondition {\n        NotSet,\n        AllObjectivesComplete,\n        SingleObjective,\n        AllTiersComplete,\n        SingleTier,\n        PointsTotal,\n        RewardPerObjective,\n        RewardPerTier\n    }\n\n    event ERC20Deposit(\n        address sender,\n        address token,\n        uint256 amount,\n        uint256 depositedAt\n    );\n    event ERC20Rewarded(address user, uint256 amount, uint256 rewardedAt);\n    event ERC20UserWithdraw(address user, uint256 amount, uint256 withdrawnAt);\n    event ERC20CreatorWithdraw(\n        address creator,\n        uint256 amount,\n        uint256 withdrawnAt\n    );\n    event FrozenStateChange(address team, bool frozen, uint256 updatedAt);\n\n    string public constant VERSION = \"0.03\";\n    address public constant TEAM_ADDRESS =\n        0xe63DC839fA2a6A418Af4B417cD45e257dD76f516;\n    uint256 public PAYOUT_BUFFER = 4;\n    uint256 public MAX_DEPOSITORS = 2;\n\n    LoyaltyProgram public loyaltyProgram;\n    address public loyaltyProgramAddress;\n    address public creator;\n    uint256 public loyaltyProgramEndsAt;\n\n    IERC20 rewardToken;\n    address public rewardTokenAddress;\n\n    mapping(address => bool) isApprovedSender;\n    mapping(address => bool) isApprovedToken;\n    mapping(bytes32 => bool) validDepositKeys;\n\n    uint256 public escrowBalance;\n    uint256 private depositStartDate;\n    uint256 private depositEndDate;\n    bool private isDepositKeySet;\n    bool public allFundsLocked;\n\n    RewardCondition rewardCondition;\n    uint256 public rewardGoal;\n    uint256 public payoutAmount;\n    mapping(address => uint256) userBalance;\n    mapping(address => mapping(uint256 => bool)) rewardGoalRewarded;\n    mapping(uint256 => uint256) payoutIndexToAmount;\n\n    bool public canceled;\n    bool public areEscrowSettingsSet;\n    bool public inIssuance;\n\n    error OnlyCreatorCanCall();\n    error OnlyTeamCanCall();\n    error OnlyLoyaltyProgramCanCall();\n    error CannotDeposit();\n    error NotInIssuance();\n\n    error DepositPeriodMustBeAtLeastOneHour();\n    error DepositEndDateExceedsProgramEnd();\n    error DepositPeriodNotActive();\n    error DepositPeriodMustBeFinished();\n    error CannotBeEmptyAmount();\n    error InsuffEscrowBal();\n\n    error IncorrectRewardCondition();\n    error MustSetValidRewardCondition();\n    error MustSetValidRewardGoal();\n\n    error MustUseValidObjectiveIndex();\n    error MustUseValidTierIndex();\n    error ObjectivesAndPayoutLengthMismatch();\n    error TiersAndPayoutLengthMismatch();\n    error TierIndex0CannotPayout();\n    error TiersMustBeActive();\n    error FundsAreLocked();\n    error InsufficientFunds();\n    error MustWithdrawPositiveAmount();\n    error ProgramNotCompleted();\n    error ExceededMaxDepositors();\n\n    constructor(\n        address _loyaltyProgramAddress,\n        address _creator,\n        uint256 _programEndsAt,\n        address _rewardTokenAddress,\n        address[] memory _approvedDepositors\n    ) {\n        loyaltyProgram = LoyaltyProgram(_loyaltyProgramAddress);\n        loyaltyProgramAddress = _loyaltyProgramAddress;\n        creator = _creator;\n        loyaltyProgramEndsAt = _programEndsAt;\n\n        if (_approvedDepositors.length > MAX_DEPOSITORS) {\n            revert ExceededMaxDepositors();\n        }\n\n        for (uint256 i = 0; i < _approvedDepositors.length; i++) {\n            isApprovedSender[_approvedDepositors[i]] = true;\n        }\n        isApprovedToken[_rewardTokenAddress] = true;\n        isApprovedSender[_creator] = true;\n\n        rewardToken = IERC20(_rewardTokenAddress);\n        rewardTokenAddress = _rewardTokenAddress;\n    }\n\n    function version() public pure returns (string memory) {\n        return VERSION;\n    }\n\n    function escrowState() public view returns (EscrowState) {\n        if (\n            canceled ||\n            loyaltyProgram.state() == LoyaltyProgram.LoyaltyState.Canceled\n        ) {\n            return EscrowState.Canceled;\n        }\n        if (allFundsLocked) return EscrowState.Frozen;\n\n        if (\n            depositStartDate <= block.timestamp &&\n            depositEndDate >= block.timestamp &&\n            isDepositKeySet\n        ) {\n            return EscrowState.DepositPeriod;\n        }\n        if (\n            block.timestamp > depositEndDate &&\n            !areEscrowSettingsSet &&\n            isDepositKeySet\n        ) {\n            return EscrowState.AwaitingEscrowSettings;\n        }\n        if (\n            areEscrowSettingsSet &&\n            loyaltyProgram.state() == LoyaltyProgram.LoyaltyState.Active\n        ) return EscrowState.InIssuance;\n\n        if (loyaltyProgram.state() == LoyaltyProgram.LoyaltyState.Completed)\n            return EscrowState.Completed;\n\n        return EscrowState.Idle;\n    }\n\n    function depositBudget(\n        uint256 _amount,\n        bytes memory _key\n    ) external returns (uint256) {\n        if (!isSenderApproved(msg.sender)) revert CannotDeposit();\n        if (escrowState() != EscrowState.DepositPeriod)\n            revert DepositPeriodNotActive();\n        if (_amount == 0) revert CannotBeEmptyAmount();\n\n        bytes32 depositKey;\n\n        assembly {\n            depositKey := mload(add(_key, 32))\n        }\n\n        if (!validDepositKeys[depositKey]) revert CannotDeposit();\n\n        rewardToken.safeIncreaseAllowance(address(this), _amount);\n        rewardToken.safeTransferFrom(msg.sender, address(this), _amount);\n\n        escrowBalance = rewardToken.balanceOf(address(this));\n        emit ERC20Deposit(\n            msg.sender,\n            rewardTokenAddress,\n            _amount,\n            block.timestamp\n        );\n\n        return rewardToken.balanceOf(msg.sender);\n    }\n\n    function handleRewardsUnlock(\n        address _user,\n        uint256 _objIndex,\n        uint256 _tierIndex,\n        uint256[] memory _passedTiers\n    ) external {\n        if (msg.sender != loyaltyProgramAddress)\n            revert OnlyLoyaltyProgramCanCall();\n        if (escrowState() != EscrowState.InIssuance) revert NotInIssuance();\n        if (rewardCondition == RewardCondition.NotSet)\n            revert IncorrectRewardCondition();\n\n        if (\n            rewardCondition == RewardCondition.RewardPerTier ||\n            rewardCondition == RewardCondition.SingleTier ||\n            rewardCondition == RewardCondition.AllTiersComplete\n        ) {\n            processTierRewards(_user, _tierIndex, _passedTiers);\n        } else if (\n            rewardCondition == RewardCondition.AllObjectivesComplete ||\n            rewardCondition == RewardCondition.PointsTotal\n        ) {\n            processUserProgressionRewards(_user);\n        } else {\n            processObjectiveRewards(_user, _objIndex);\n        }\n    }\n\n    function processTierRewards(\n        address _user,\n        uint256 _tierIndex,\n        uint256[] memory _passedTiers\n    ) private {\n        if (msg.sender != loyaltyProgramAddress)\n            revert OnlyLoyaltyProgramCanCall();\n        if (escrowState() != EscrowState.InIssuance) revert NotInIssuance();\n\n        if (rewardCondition == RewardCondition.RewardPerTier) {\n            for (uint256 i = 0; i < _passedTiers.length; i++) {\n                uint256 tierIndex = _passedTiers[i];\n                bool alreadyRewardedTier = rewardGoalRewarded[_user][tierIndex];\n                uint256 amount = payoutIndexToAmount[tierIndex];\n                if (\n                    !alreadyRewardedTier &&\n                    tierIndex != 0 &&\n                    escrowBalance >= amount\n                ) {\n                    rewardGoalRewarded[_user][tierIndex] = true;\n                    userBalance[_user] += amount;\n                    escrowBalance -= amount;\n                    emit ERC20Rewarded(_user, amount, block.timestamp);\n                }\n            }\n        } else if (rewardCondition == RewardCondition.SingleTier) {\n            bool tierAlreadyRewarded = rewardGoalRewarded[_user][rewardGoal];\n            if (\n                _tierIndex >= rewardGoal &&\n                !tierAlreadyRewarded &&\n                escrowBalance >= payoutAmount\n            ) {\n                rewardGoalRewarded[_user][rewardGoal] = true;\n                userBalance[_user] += payoutAmount;\n                escrowBalance -= payoutAmount;\n                emit ERC20Rewarded(_user, payoutAmount, block.timestamp);\n            }\n        } else {\n            bool tierAlreadyRewarded = rewardGoalRewarded[_user][rewardGoal];\n            if (\n                _tierIndex == rewardGoal &&\n                !tierAlreadyRewarded &&\n                escrowBalance >= payoutAmount\n            ) {\n                rewardGoalRewarded[_user][rewardGoal] = true;\n                userBalance[_user] += payoutAmount;\n                escrowBalance -= payoutAmount;\n                emit ERC20Rewarded(_user, payoutAmount, block.timestamp);\n            }\n        }\n    }\n\n    function processUserProgressionRewards(address _user) private {\n        bool userAlreadyRewarded = rewardGoalRewarded[_user][rewardGoal];\n        bool escrowHasFunds = escrowBalance >= payoutAmount;\n        if (rewardCondition == RewardCondition.AllObjectivesComplete) {\n            uint256 objectivesCompleteCount = loyaltyProgram\n                .getUserObjectivesCompleteCount(_user);\n            if (\n                objectivesCompleteCount == rewardGoal &&\n                !userAlreadyRewarded &&\n                escrowHasFunds\n            ) {\n                rewardGoalRewarded[_user][rewardGoal] = true;\n                userBalance[_user] += payoutAmount;\n                escrowBalance -= payoutAmount;\n                emit ERC20Rewarded(_user, payoutAmount, block.timestamp);\n            }\n        } else if (rewardCondition == RewardCondition.PointsTotal) {\n            (uint256 rewardsEarned, ) = loyaltyProgram.getUserProgression(\n                _user\n            );\n            if (\n                rewardsEarned >= rewardGoal &&\n                !userAlreadyRewarded &&\n                escrowHasFunds\n            ) {\n                rewardGoalRewarded[_user][rewardGoal] = true;\n                userBalance[_user] += payoutAmount;\n                escrowBalance -= payoutAmount;\n                emit ERC20Rewarded(_user, payoutAmount, block.timestamp);\n            }\n        }\n    }\n\n    function processObjectiveRewards(address _user, uint256 _objIndex) private {\n        if (rewardCondition == RewardCondition.RewardPerObjective) {\n            bool objAlreadyRewarded = rewardGoalRewarded[_user][_objIndex];\n            uint256 amount = payoutIndexToAmount[_objIndex];\n            if (!objAlreadyRewarded && escrowBalance >= amount) {\n                rewardGoalRewarded[_user][_objIndex] = true;\n                userBalance[_user] += amount;\n                escrowBalance -= amount;\n                emit ERC20Rewarded(_user, amount, block.timestamp);\n            }\n        } else if (rewardCondition == RewardCondition.SingleObjective) {\n            bool alreadyRewarded = rewardGoalRewarded[_user][rewardGoal];\n            if (\n                _objIndex == rewardGoal &&\n                !alreadyRewarded &&\n                escrowBalance >= payoutAmount\n            ) {\n                rewardGoalRewarded[_user][_objIndex] = true;\n                userBalance[_user] += payoutAmount;\n                escrowBalance -= payoutAmount;\n                emit ERC20Rewarded(_user, payoutAmount, block.timestamp);\n            }\n        }\n    }\n\n    function setEscrowSettingsBasic(\n        RewardCondition _rewardCondition,\n        uint256 _rewardGoal,\n        uint256 _rewardAmount\n    ) external {\n        if (_rewardAmount == 0) revert CannotBeEmptyAmount();\n\n        runSetEscrowSettingsChecks(_rewardCondition);\n\n        if (\n            _rewardCondition == RewardCondition.RewardPerObjective &&\n            _rewardCondition == RewardCondition.RewardPerTier\n        ) {\n            revert MustSetValidRewardCondition();\n        }\n\n        if (escrowBalance < _rewardAmount * PAYOUT_BUFFER)\n            revert InsuffEscrowBal();\n\n        if (_rewardCondition == RewardCondition.AllObjectivesComplete) {\n            rewardGoal = loyaltyProgram.getObjectives().length;\n            payoutAmount = _rewardAmount;\n        } else if (_rewardCondition == RewardCondition.AllTiersComplete) {\n            rewardGoal = loyaltyProgram.tierCount() - 1;\n            payoutAmount = _rewardAmount;\n        } else if (_rewardCondition == RewardCondition.SingleObjective) {\n            uint256 objectivesLength = loyaltyProgram.getObjectives().length;\n            if (_rewardGoal == 0 || _rewardGoal >= objectivesLength) {\n                revert MustUseValidObjectiveIndex();\n            }\n            rewardGoal = _rewardGoal;\n            payoutAmount = _rewardAmount;\n        } else if (_rewardCondition == RewardCondition.SingleTier) {\n            if (_rewardGoal == 0 || _rewardGoal >= loyaltyProgram.tierCount()) {\n                revert MustUseValidTierIndex();\n            }\n            rewardGoal = _rewardGoal;\n            payoutAmount = _rewardAmount;\n        } else {\n            if (\n                _rewardGoal == 0 ||\n                _rewardGoal > loyaltyProgram.totalPointsPossible()\n            ) {\n                revert MustSetValidRewardGoal();\n            }\n            rewardGoal = _rewardGoal;\n            payoutAmount = _rewardAmount;\n        }\n\n        areEscrowSettingsSet = true;\n        rewardCondition = _rewardCondition;\n    }\n\n    function setEscrowSettingsAdvanced(\n        RewardCondition _rewardCondition,\n        uint256[] calldata _payouts\n    ) external {\n        runSetEscrowSettingsChecks(_rewardCondition);\n\n        if (\n            _rewardCondition != RewardCondition.RewardPerObjective &&\n            _rewardCondition != RewardCondition.RewardPerTier\n        ) {\n            revert MustSetValidRewardCondition();\n        }\n        verifyTokenBalance(_payouts);\n\n        if (_rewardCondition == RewardCondition.RewardPerObjective) {\n            uint256 objectivesLength = loyaltyProgram.getObjectives().length;\n            if (objectivesLength != _payouts.length) {\n                revert ObjectivesAndPayoutLengthMismatch();\n            }\n            for (uint256 i = 0; i < objectivesLength; i++) {\n                payoutIndexToAmount[i] = _payouts[i];\n            }\n            rewardCondition = RewardCondition.RewardPerObjective;\n        } else {\n            uint256 tierCount = loyaltyProgram.tierCount();\n            if (tierCount == 0) revert TiersMustBeActive();\n            if (tierCount != _payouts.length)\n                revert TiersAndPayoutLengthMismatch();\n            if (_payouts[0] != 0) revert TierIndex0CannotPayout();\n            for (uint256 i = 0; i < tierCount; i++) {\n                payoutIndexToAmount[i] = _payouts[i];\n            }\n            rewardCondition = RewardCondition.RewardPerTier;\n        }\n        areEscrowSettingsSet = true;\n    }\n\n    function verifyTokenBalance(uint256[] calldata _payouts) private view {\n        uint256 totalPayouts = 0;\n        for (uint256 i = 0; i < _payouts.length; i++) {\n            totalPayouts += _payouts[i];\n        }\n        if (escrowBalance < totalPayouts * PAYOUT_BUFFER)\n            revert InsuffEscrowBal();\n    }\n\n    function runSetEscrowSettingsChecks(\n        RewardCondition _rewardCondition\n    ) private view {\n        if (msg.sender != creator) revert OnlyCreatorCanCall();\n        if (escrowState() != EscrowState.AwaitingEscrowSettings)\n            revert DepositPeriodMustBeFinished();\n        if (_rewardCondition == RewardCondition.NotSet)\n            revert MustSetValidRewardCondition();\n    }\n\n    function userWithdrawAll() external returns (uint256) {\n        if (escrowState() == EscrowState.Frozen) revert FundsAreLocked();\n\n        uint256 balance = userBalance[msg.sender];\n        if (balance == 0) revert InsufficientFunds();\n\n        rewardToken.safeTransfer(msg.sender, balance);\n        userBalance[msg.sender] = 0;\n\n        emit ERC20UserWithdraw(msg.sender, balance, block.timestamp);\n        return rewardToken.balanceOf(msg.sender);\n    }\n\n    function userWithdraw(uint256 _amount) external returns (uint256) {\n        if (escrowState() == EscrowState.Frozen) revert FundsAreLocked();\n        if (_amount == 0) revert MustWithdrawPositiveAmount();\n\n        uint256 balance = userBalance[msg.sender];\n        if (balance == 0 || _amount > balance) revert InsufficientFunds();\n\n        rewardToken.safeTransfer(msg.sender, _amount);\n        userBalance[msg.sender] -= _amount;\n\n        emit ERC20UserWithdraw(msg.sender, _amount, block.timestamp);\n        return rewardToken.balanceOf(msg.sender);\n    }\n\n    function creatorWithdrawAll() external returns (uint256) {\n        if (msg.sender != creator) revert OnlyCreatorCanCall();\n        if (escrowBalance == 0) revert InsufficientFunds();\n        if (escrowState() == EscrowState.Frozen) revert FundsAreLocked();\n        if (\n            escrowState() != EscrowState.Completed &&\n            escrowState() != EscrowState.Canceled\n        ) revert ProgramNotCompleted();\n\n        uint256 amount = escrowBalance;\n        rewardToken.safeTransfer(msg.sender, amount);\n        escrowBalance = 0;\n\n        emit ERC20CreatorWithdraw(msg.sender, amount, block.timestamp);\n        return rewardToken.balanceOf(msg.sender);\n    }\n\n    function creatorWithdraw(uint256 _amount) external returns (uint256) {\n        if (msg.sender != creator) revert OnlyCreatorCanCall();\n        if (escrowBalance == 0 || _amount == 0) revert InsufficientFunds();\n        if (escrowState() == EscrowState.Frozen) revert FundsAreLocked();\n        if (\n            escrowState() != EscrowState.Completed &&\n            escrowState() != EscrowState.Canceled\n        ) revert ProgramNotCompleted();\n\n        rewardToken.safeTransfer(msg.sender, _amount);\n        escrowBalance -= _amount;\n\n        emit ERC20CreatorWithdraw(msg.sender, _amount, block.timestamp);\n        return rewardToken.balanceOf(msg.sender);\n    }\n\n    function isTokenApproved(address _token) public view returns (bool) {\n        return isApprovedToken[_token];\n    }\n\n    function isSenderApproved(address _sender) public view returns (bool) {\n        return isApprovedSender[_sender];\n    }\n\n    function setDepositKey(bytes32 key, uint256 _depositEndDate) external {\n        if (msg.sender != creator) revert OnlyCreatorCanCall();\n\n        uint256 minimumDepositPeriod = 1 hours;\n        uint256 depositToProgramEndBuffer = 4 hours;\n\n        if (_depositEndDate <= block.timestamp + minimumDepositPeriod) {\n            revert DepositPeriodMustBeAtLeastOneHour();\n        }\n\n        if (\n            _depositEndDate >= loyaltyProgramEndsAt + depositToProgramEndBuffer\n        ) {\n            revert DepositEndDateExceedsProgramEnd();\n        }\n\n        validDepositKeys[key] = true;\n        depositStartDate = block.timestamp;\n        depositEndDate = _depositEndDate;\n        isDepositKeySet = true;\n    }\n\n    function emergencyFreeze(bool _isFrozen) external {\n        if (msg.sender != TEAM_ADDRESS) revert OnlyTeamCanCall();\n        allFundsLocked = _isFrozen;\n        emit FrozenStateChange(msg.sender, _isFrozen, block.timestamp);\n    }\n\n    function cancelProgramEscrow() external {\n        if (msg.sender != creator) revert OnlyCreatorCanCall();\n        canceled = true;\n    }\n\n    function lookupUserBalance(address _user) external view returns (uint256) {\n        require(\n            msg.sender == creator || msg.sender == TEAM_ADDRESS,\n            \"Must be creator or team\"\n        );\n        return userBalance[_user];\n    }\n\n    function lookupEscrowBalance() external view returns (uint256) {\n        return escrowBalance;\n    }\n\n    //TEMP: temp for testing\n    function getPayoutAmountFromIndex(\n        uint256 _payoutIndex\n    ) public view returns (uint256) {\n        return payoutIndexToAmount[_payoutIndex];\n    }\n}\n"
    },
    "contracts/Loyalty0.03/modules/LoyaltyERC721Escrow.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport \"../LoyaltyProgram.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\ninterface ERC721Partial {\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) external;\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) external;\n}\n\ncontract LoyaltyERC721Escrow is IERC721Receiver, Ownable {\n    enum EscrowState {\n        Idle,\n        DepositPeriod,\n        AwaitingEscrowSettings,\n        InIssuance,\n        Completed,\n        Frozen,\n        Canceled\n    }\n\n    enum RewardOrder {\n        NotSet,\n        Ascending,\n        Descending,\n        Random\n    }\n\n    enum RewardCondition {\n        NotSet,\n        ObjectiveCompleted,\n        TierReached,\n        PointsTotal\n    }\n\n    enum UserTokenStatus {\n        Locked,\n        Unlocked,\n        Paid\n    }\n\n    struct UserAccount {\n        uint256[] rewardedTokenBalance;\n        bool didReachGoal;\n    }\n\n    event ERC721TokenReceived(\n        address collectionAddress,\n        address from,\n        uint256 tokenId,\n        uint256 receivedAt\n    );\n    event ERC721BatchReceived(\n        address from,\n        uint256[] tokens,\n        uint256 receivedAt\n    );\n    event SortTokenQueue(\n        address creator,\n        uint256[] tokensArr,\n        RewardOrder rewardOrder,\n        uint256 requestedAt\n    );\n    event TokenQueueReceived(uint256[] sortedTokenQueue, uint256 receivedAt);\n\n    event ERC721Rewarded(\n        address indexed user,\n        uint256 token,\n        uint256 rewardedAt\n    );\n    event ERC721UserWithdraw(\n        address indexed user,\n        uint256 token,\n        uint256 withdrawnAt\n    );\n    event ERC721CreatorWithdraw(\n        address creator,\n        uint256 token,\n        uint256 withdrawnAt\n    );\n    event FrozenStateChange(address team, bool frozen, uint256 updatedAt);\n\n    string public constant VERSION = \"0.03\";\n    address public constant TEAM_ADDRESS =\n        0x262dE7a263d23BeA5544b7a0BF08F2c00BFABE7b;\n    uint256 public constant MAX_DEPOSITORS = 2;\n\n    LoyaltyProgram public loyaltyProgram;\n    address public loyaltyProgramAddress;\n    address public creator;\n    uint256 public loyaltyProgramEndsAt;\n    uint256 public depositStartDate;\n    uint256 public depositEndDate;\n    uint256 public maxTokensAllowed = 51;\n\n    RewardOrder rewardOrder;\n    RewardCondition rewardCondition;\n    uint256 public rewardGoal;\n\n    uint256 public totalTokensAmount;\n    uint256 public totalTokensRewarded;\n    uint256[] public tokenIds;\n    string public collectionName;\n    string public collectionSymbol;\n    address public collectionAddress;\n    bool public allFundsPaid;\n\n    mapping(uint256 => bool) tokenExists;\n    mapping(uint256 => bool) isTokenRewarded;\n\n    mapping(address => bool) isApprovedSender;\n    mapping(address => bool) isCollectionLoyaltyProgramApproved;\n    mapping(bytes32 => bool) private validDepositKeys;\n    mapping(address => UserAccount) userAccount;\n    uint256[] private tokenQueue;\n\n    bool public areEscrowSettingsSet;\n    bool public isDepositKeySet;\n    bool public inIssuance;\n    bool public completed;\n    bool public allFundsLocked;\n    bool public canceled;\n\n    error OnlyCreatorCanCall();\n    error OnlyTeamCanCall();\n    error OnlyLoyaltyProgramCanCall();\n    error OnlyTeamOrCreatorCanCall();\n\n    error DepositsAreLocked();\n    error FundsAreLocked();\n    error DepositPeriodMustBeAtLeastOneHour();\n    error DepositEndDateExceedsProgramEnd();\n    error DepositPeriodMustBeFinished();\n    error ExceededMaxTokensAllowed();\n    error TokenQueueLengthMismatch();\n    error IncorrectRewardType();\n    error IncorrectRewardOrder();\n    error NotInIssuance();\n    error RewardOrderNotSet();\n    error NoTokensToWithdraw();\n    error LoyaltyProgramMustBeCompleted();\n    error ExceededMaxDepositors();\n    error IncorrectDepositKey();\n\n    constructor(\n        address _loyaltyProgramAddress,\n        address _creator,\n        uint256 _programEndsAt,\n        address _rewardTokenAddress,\n        address[] memory _approvedDepositors\n    ) {\n        loyaltyProgram = LoyaltyProgram(_loyaltyProgramAddress);\n        loyaltyProgramAddress = _loyaltyProgramAddress;\n        creator = _creator;\n        loyaltyProgramEndsAt = _programEndsAt;\n\n        if (_approvedDepositors.length > MAX_DEPOSITORS) {\n            revert ExceededMaxDepositors();\n        }\n\n        for (uint256 i = 0; i < _approvedDepositors.length; i++) {\n            isApprovedSender[_approvedDepositors[i]] = true;\n        }\n        isApprovedSender[creator] = true;\n        isApprovedSender[address(this)] = true;\n        isCollectionLoyaltyProgramApproved[_rewardTokenAddress] = true;\n    }\n\n    function version() public pure returns (string memory) {\n        return VERSION;\n    }\n\n    function escrowState() public view returns (EscrowState) {\n        if (\n            canceled ||\n            loyaltyProgram.state() == LoyaltyProgram.LoyaltyState.Canceled\n        ) {\n            return EscrowState.Canceled;\n        }\n        if (allFundsLocked) return EscrowState.Frozen;\n\n        if (\n            depositStartDate <= block.timestamp &&\n            depositEndDate >= block.timestamp &&\n            isDepositKeySet\n        ) {\n            return EscrowState.DepositPeriod;\n        }\n\n        if (\n            block.timestamp > depositEndDate &&\n            !areEscrowSettingsSet &&\n            isDepositKeySet\n        ) {\n            return EscrowState.AwaitingEscrowSettings;\n        }\n        if (\n            inIssuance &&\n            loyaltyProgram.state() == LoyaltyProgram.LoyaltyState.Active\n        ) return EscrowState.InIssuance;\n\n        if (\n            loyaltyProgram.state() == LoyaltyProgram.LoyaltyState.Completed ||\n            allFundsPaid\n        ) return EscrowState.Completed;\n\n        return EscrowState.Idle;\n    }\n\n    function onERC721Received(\n        address _operator,\n        address _from,\n        uint256 _tokenId,\n        bytes memory _data\n    ) external override returns (bytes4) {\n        require(\n            isSenderApproved(_from) && isSenderApproved(_operator),\n            \"Unapproved sender\"\n        );\n        require(isCollectionApproved(_msgSender()), \"Unapproved collection\");\n        require(_data.length >= 32, \"Invalid data length\");\n\n        bytes32 depositKey;\n\n        assembly {\n            depositKey := mload(add(_data, 32))\n        }\n        require(validDepositKeys[depositKey], \"Invalid deposit key\");\n\n        if (escrowState() != EscrowState.DepositPeriod)\n            revert DepositsAreLocked();\n\n        parseTokensAddToEscrow(_msgSender(), _tokenId);\n\n        emit ERC721TokenReceived(\n            _msgSender(),\n            _from,\n            _tokenId,\n            block.timestamp\n        );\n\n        return IERC721Receiver.onERC721Received.selector;\n    }\n\n    function parseTokensAddToEscrow(\n        address _contractAddress,\n        uint256 _tokenId\n    ) private {\n        if (totalTokensAmount > maxTokensAllowed)\n            revert ExceededMaxTokensAllowed();\n\n        if (!tokenExists[_tokenId]) {\n            if (tokenIds.length == 0) {\n                (\n                    string memory name,\n                    string memory symbol\n                ) = getTokenNameAndSymbol(_contractAddress);\n                collectionName = name;\n                collectionSymbol = symbol;\n                collectionAddress = _contractAddress;\n            }\n            tokenExists[_tokenId] = true;\n            totalTokensAmount++;\n            tokenIds.push(_tokenId);\n        }\n    }\n\n    function batchTransfer(\n        ERC721Partial _rewardsContract,\n        uint256[] calldata _tokenIds,\n        bytes memory _depositKey\n    ) external {\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\n            _rewardsContract.transferFrom(\n                msg.sender,\n                address(this),\n                _tokenIds[i],\n                _depositKey\n            );\n        }\n        emit ERC721BatchReceived(msg.sender, _tokenIds, block.timestamp);\n    }\n\n    function safeBatchTransfer(\n        ERC721Partial _rewardsContract,\n        uint256[] calldata _tokenIds,\n        bytes memory _depositKey\n    ) external {\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\n            _rewardsContract.safeTransferFrom(\n                msg.sender,\n                address(this),\n                _tokenIds[i],\n                _depositKey\n            );\n        }\n        emit ERC721BatchReceived(msg.sender, _tokenIds, block.timestamp);\n    }\n\n    function handleRewardsUnlock(\n        address _user,\n        uint256 _rewardGoal,\n        uint256 _rewardGoalTier\n    ) external {\n        if (msg.sender != loyaltyProgramAddress)\n            revert OnlyLoyaltyProgramCanCall();\n        if (escrowState() != EscrowState.InIssuance) revert NotInIssuance();\n\n        bool alreadyRewarded = userAccount[_user].didReachGoal;\n\n        if (rewardCondition == RewardCondition.ObjectiveCompleted) {\n            if (\n                _rewardGoal > 0 && rewardGoal == _rewardGoal && !alreadyRewarded\n            ) {\n                userAccount[_user].didReachGoal = true;\n                distributeRewardByRewardOrder(_user);\n            }\n        } else if (rewardCondition == RewardCondition.TierReached) {\n            if (\n                _rewardGoalTier > 0 &&\n                _rewardGoalTier >= rewardGoal &&\n                !alreadyRewarded\n            ) {\n                userAccount[_user].didReachGoal = true;\n                distributeRewardByRewardOrder(_user);\n            }\n        } else {\n            (uint256 rewardsEarned, ) = loyaltyProgram.getUserProgression(\n                _user\n            );\n\n            if (rewardsEarned >= rewardGoal && !alreadyRewarded) {\n                userAccount[_user].didReachGoal = true;\n                distributeRewardByRewardOrder(_user);\n            }\n        }\n    }\n\n    function distributeRewardByRewardOrder(address _user) private {\n        if (rewardOrder == RewardOrder.NotSet) revert RewardOrderNotSet();\n        if (\n            tokenQueue.length == 0 ||\n            tokenQueue.length != tokenIds.length - totalTokensRewarded\n        ) {\n            revert TokenQueueLengthMismatch();\n        }\n        uint256 rewardedToken = tokenQueue[tokenQueue.length - 1];\n        if (!isTokenRewarded[rewardedToken]) {\n            isTokenRewarded[rewardedToken] = true;\n            totalTokensRewarded++;\n\n            UserAccount storage user = userAccount[_user];\n            user.rewardedTokenBalance.push(rewardedToken);\n\n            tokenQueue.pop();\n\n            emit ERC721Rewarded(_user, rewardedToken, block.timestamp);\n        } else revert TokenQueueLengthMismatch();\n    }\n\n    function userWithdrawAll() external {\n        UserAccount storage user = userAccount[msg.sender];\n        uint256[] memory userBalance = user.rewardedTokenBalance;\n\n        if (userBalance.length == 0) revert NoTokensToWithdraw();\n        if (escrowState() == EscrowState.Frozen || !user.didReachGoal)\n            revert FundsAreLocked();\n\n        IERC721 collection = IERC721(collectionAddress);\n\n        for (uint256 i = 0; i < userBalance.length; i++) {\n            collection.transferFrom(address(this), msg.sender, userBalance[i]);\n            emit ERC721UserWithdraw(\n                msg.sender,\n                userBalance[i],\n                block.timestamp\n            );\n        }\n        delete userAccount[msg.sender].rewardedTokenBalance;\n    }\n\n    function creatorWithdrawAll() external {\n        if (msg.sender != creator) revert OnlyCreatorCanCall();\n        if (escrowState() != EscrowState.Completed)\n            revert LoyaltyProgramMustBeCompleted();\n        if (tokenQueue.length == 0) revert NoTokensToWithdraw();\n\n        IERC721 collection = IERC721(collectionAddress);\n        for (uint256 i = 0; i < tokenQueue.length; i++) {\n            collection.transferFrom(address(this), msg.sender, tokenQueue[i]);\n            delete tokenQueue[i];\n            emit ERC721CreatorWithdraw(\n                msg.sender,\n                tokenQueue[i],\n                block.timestamp\n            );\n        }\n    }\n\n    function setEscrowSettings(\n        RewardOrder _rewardOrder,\n        RewardCondition _rewardCondition,\n        uint256 _rewardGoal\n    ) external {\n        if (msg.sender != creator) revert OnlyCreatorCanCall();\n        (\n            bool tiersAreActive,\n            uint256 tierCount,\n            ,\n            LoyaltyProgram.RewardType rewardType,\n            LoyaltyProgram.Objective[] memory objectives\n        ) = loyaltyProgram.getLoyaltyProgramSettings();\n\n        if (rewardType != LoyaltyProgram.RewardType.ERC721) {\n            revert IncorrectRewardType();\n        }\n        if (_rewardOrder == RewardOrder.NotSet) revert IncorrectRewardOrder();\n\n        if (escrowState() != EscrowState.AwaitingEscrowSettings) {\n            revert DepositPeriodMustBeFinished();\n        }\n\n        if (_rewardCondition == RewardCondition.ObjectiveCompleted) {\n            require(\n                _rewardGoal > 0 && _rewardGoal < objectives.length,\n                \"Invalid objective index\"\n            );\n            rewardGoal = _rewardGoal;\n        } else if (_rewardCondition == RewardCondition.TierReached) {\n            require(tiersAreActive, \"Tiers not active\");\n            require(\n                _rewardGoal > 0 && _rewardGoal < tierCount,\n                \"Invalid tier index\"\n            );\n            rewardGoal = _rewardGoal;\n        } else {\n            uint256 totalPointsPossible = loyaltyProgram.totalPointsPossible();\n            require(\n                _rewardGoal > 0 && _rewardGoal <= totalPointsPossible,\n                \"Points out of bounds\"\n            );\n            rewardGoal = _rewardGoal;\n        }\n\n        rewardOrder = _rewardOrder;\n        rewardCondition = _rewardCondition;\n        areEscrowSettingsSet = true;\n        sortTokenQueue(msg.sender, _rewardOrder);\n    }\n\n    function sortTokenQueue(address _sender, RewardOrder _rewardOrder) private {\n        emit SortTokenQueue(_sender, tokenIds, _rewardOrder, block.timestamp);\n    }\n\n    function receiveTokenQueue(\n        uint256[] memory _sortedTokenQueue,\n        bytes32 _depositKey\n    ) external {\n        if (msg.sender != TEAM_ADDRESS && msg.sender != creator)\n            revert OnlyTeamOrCreatorCanCall();\n        if (_sortedTokenQueue.length != tokenIds.length)\n            revert TokenQueueLengthMismatch();\n        if (!validDepositKeys[_depositKey]) revert IncorrectDepositKey();\n\n        tokenQueue = _sortedTokenQueue;\n        inIssuance = true;\n\n        emit TokenQueueReceived(_sortedTokenQueue, block.timestamp);\n    }\n\n    function getTokenNameAndSymbol(\n        address _tokenAddress\n    ) private view returns (string memory, string memory) {\n        IERC721Metadata token = IERC721Metadata(_tokenAddress);\n        return (token.name(), token.symbol());\n    }\n\n    function getTokenIds() public view returns (uint256[] memory) {\n        return tokenIds;\n    }\n\n    function getBasicEscrowInfo()\n        public\n        view\n        returns (\n            uint256 totalTokens,\n            string memory name,\n            string memory symbol,\n            address collection\n        )\n    {\n        return (\n            totalTokensAmount,\n            collectionName,\n            collectionSymbol,\n            collectionAddress\n        );\n    }\n\n    function lookupTokenQueue() external view returns (uint256[] memory) {\n        if (msg.sender != TEAM_ADDRESS && msg.sender != creator) {\n            revert OnlyTeamOrCreatorCanCall();\n        }\n        return tokenQueue;\n    }\n\n    function getUserAccount(\n        address _user\n    ) external view returns (uint256[] memory tokenBalance) {\n        if (msg.sender != TEAM_ADDRESS && msg.sender != creator)\n            revert OnlyTeamOrCreatorCanCall();\n        return (userAccount[_user].rewardedTokenBalance);\n    }\n\n    function isCollectionApproved(\n        address _collectionAddress\n    ) public view returns (bool) {\n        return isCollectionLoyaltyProgramApproved[_collectionAddress];\n    }\n\n    function isSenderApproved(address _sender) public view returns (bool) {\n        return isApprovedSender[_sender];\n    }\n\n    function setDepositKey(bytes32 key, uint256 _depositEndDate) external {\n        if (msg.sender != creator) revert OnlyCreatorCanCall();\n\n        uint256 minimumDepositPeriod = 1 hours;\n        uint256 depositToProgramEndBuffer = 4 hours;\n\n        if (_depositEndDate <= block.timestamp + minimumDepositPeriod) {\n            revert DepositPeriodMustBeAtLeastOneHour();\n        }\n\n        if (\n            _depositEndDate >= loyaltyProgramEndsAt + depositToProgramEndBuffer\n        ) {\n            revert DepositEndDateExceedsProgramEnd();\n        }\n\n        validDepositKeys[key] = true;\n        depositStartDate = block.timestamp;\n        depositEndDate = _depositEndDate;\n        isDepositKeySet = true;\n    }\n\n    function emergencyFreeze(bool _isFrozen) external {\n        if (msg.sender != TEAM_ADDRESS) revert OnlyTeamCanCall();\n        allFundsLocked = _isFrozen;\n        emit FrozenStateChange(msg.sender, _isFrozen, block.timestamp);\n    }\n\n    function cancelProgramEscrow() external {\n        if (msg.sender != creator) revert OnlyCreatorCanCall();\n        canceled = true;\n    }\n}\n"
    },
    "contracts/Loyalty0.03/utils/LoyaltySorting.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nabstract contract LoyaltySorting {\n    bool public tiersSortingActive;\n\n    constructor(bool _tiersSortingActive) {\n        tiersSortingActive = _tiersSortingActive;\n    }\n\n    function areTiersAscendingNoDuplicates(\n        uint256[] memory _tiersArr\n    ) internal pure returns (bool) {\n        for (uint256 i = 1; i < _tiersArr.length; i++) {\n            if (_tiersArr[i] < _tiersArr[i - 1]) {\n                return false;\n            }\n        }\n        return allUniqueValues(_tiersArr);\n    }\n\n    function allUniqueValues(\n        uint256[] memory _arr\n    ) internal pure returns (bool) {\n        uint256 length = _arr.length;\n\n        for (uint256 i = 0; i < length - 1; i++) {\n            for (uint256 j = 0; j < length - i - 1; j++) {\n                if (_arr[j] > _arr[j + 1]) {\n                    (_arr[j], _arr[j + 1] = _arr[j + 1], _arr[j]);\n                }\n            }\n        }\n\n        for (uint256 i = 0; i < length - 1; i++) {\n            if (_arr[i] == _arr[i + 1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"
    },
    "hardhat/console.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.4.22 <0.9.0;\n\nlibrary console {\n    address constant CONSOLE_ADDRESS =\n        0x000000000000000000636F6e736F6c652e6c6f67;\n\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\n        address consoleAddress = CONSOLE_ADDRESS;\n        /// @solidity memory-safe-assembly\n        assembly {\n            pop(\n                staticcall(\n                    gas(),\n                    consoleAddress,\n                    add(payload, 32),\n                    mload(payload),\n                    0,\n                    0\n                )\n            )\n        }\n    }\n\n    function _castToPure(\n      function(bytes memory) internal view fnIn\n    ) internal pure returns (function(bytes memory) pure fnOut) {\n        assembly {\n            fnOut := fnIn\n        }\n    }\n\n    function _sendLogPayload(bytes memory payload) internal pure {\n        _castToPure(_sendLogPayloadImplementation)(payload);\n    }\n\n    function log() internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log()\"));\n    }\n    function logInt(int256 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(int256)\", p0));\n    }\n\n    function logUint(uint256 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n    }\n\n    function logString(string memory p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n    }\n\n    function logBool(bool p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n    }\n\n    function logAddress(address p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n    }\n\n    function logBytes(bytes memory p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n    }\n\n    function logBytes1(bytes1 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n    }\n\n    function logBytes2(bytes2 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n    }\n\n    function logBytes3(bytes3 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n    }\n\n    function logBytes4(bytes4 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n    }\n\n    function logBytes5(bytes5 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n    }\n\n    function logBytes6(bytes6 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n    }\n\n    function logBytes7(bytes7 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n    }\n\n    function logBytes8(bytes8 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n    }\n\n    function logBytes9(bytes9 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n    }\n\n    function logBytes10(bytes10 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n    }\n\n    function logBytes11(bytes11 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n    }\n\n    function logBytes12(bytes12 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n    }\n\n    function logBytes13(bytes13 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n    }\n\n    function logBytes14(bytes14 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n    }\n\n    function logBytes15(bytes15 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n    }\n\n    function logBytes16(bytes16 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n    }\n\n    function logBytes17(bytes17 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n    }\n\n    function logBytes18(bytes18 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n    }\n\n    function logBytes19(bytes19 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n    }\n\n    function logBytes20(bytes20 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n    }\n\n    function logBytes21(bytes21 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n    }\n\n    function logBytes22(bytes22 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n    }\n\n    function logBytes23(bytes23 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n    }\n\n    function logBytes24(bytes24 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n    }\n\n    function logBytes25(bytes25 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n    }\n\n    function logBytes26(bytes26 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n    }\n\n    function logBytes27(bytes27 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n    }\n\n    function logBytes28(bytes28 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n    }\n\n    function logBytes29(bytes29 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n    }\n\n    function logBytes30(bytes30 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n    }\n\n    function logBytes31(bytes31 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n    }\n\n    function logBytes32(bytes32 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n    }\n\n    function log(uint256 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n    }\n\n    function log(string memory p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n    }\n\n    function log(bool p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n    }\n\n    function log(address p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n    }\n\n    function log(uint256 p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256)\", p0, p1));\n    }\n\n    function log(uint256 p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string)\", p0, p1));\n    }\n\n    function log(uint256 p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool)\", p0, p1));\n    }\n\n    function log(uint256 p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address)\", p0, p1));\n    }\n\n    function log(string memory p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256)\", p0, p1));\n    }\n\n    function log(string memory p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n    }\n\n    function log(string memory p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n    }\n\n    function log(string memory p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n    }\n\n    function log(bool p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256)\", p0, p1));\n    }\n\n    function log(bool p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n    }\n\n    function log(bool p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n    }\n\n    function log(bool p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n    }\n\n    function log(address p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256)\", p0, p1));\n    }\n\n    function log(address p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n    }\n\n    function log(address p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n    }\n\n    function log(address p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n    }\n\n}\n"
    }
  }
}
